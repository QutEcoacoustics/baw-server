# now using `docker compose` (over  `docker-compose`) and
# the version is the latest schema defined by the docker compose specification.
# https://github.com/compose-spec/compose-spec/blob/master/spec.md#Requirements-and-optional-attributes
services:
  redis:
    image: redis:6-alpine
    ports:
      - "6379:6379"
    networks:
      - baw_network

  db:
    image: postgres
    volumes:
      - postgres-data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - baw_network
    environment:
      # never, ever, ever use this is a production setup!
      # Only use this in a dev environment
      POSTGRES_PASSWORD: password

  upload: &upload
    # Default command is `sftpgo serve`
    #command: sftpgo serve
    image: drakkan/sftpgo:edge-alpine
    depends_on:
      - db
    environment:
      RAILS_ENV: development
    networks:
      baw_network:
    ports:
      - "8080:8080"
      - "2022:2022"
      - "8090:8090"
    restart: on-failure
    volumes:
      - type: bind
        source: ./provision/upload/config
        target: /var/lib/sftpgo
        # mount the harvester to do directory - this is where we want to allow uploads
      - type: bind
        # the rails app knows about this directory from config (actions/harvest/to_do_path)
        source: ./tmp/_development_harvester_to_do_path
        target: /srv/sftpgo/data
  upload_test:
    <<: *upload
    environment:
      RAILS_ENV: test
      SFTPGO_DATA_PROVIDER__NAME: baw_local_test
    networks:
      baw_network:
        aliases:
          - upload.test
    ports:
      # note this only changes host mapping, internal port is still 8080 and what is used by the web service's tests
      - "8081:8080"
      - "2023:2022"
      - "8091:8090"
    volumes:
      - type: bind
        source: ./provision/upload/config
        target: /var/lib/sftpgo
      - type: bind
        source: ./tmp/_test_harvester_to_do_path
        target: /srv/sftpgo/data

  workers: &worker
    build:
        context: .
        dockerfile: ./Dockerfile
    command: >-
      rerun -- bin/baw-workers baw:worker:run
    depends_on:
      - db
      - redis
    environment:
      RAILS_ENV: development
    networks:
      - baw_network
    restart: on-failure
    volumes:
      - type: bind
        source: ./
        target: /home/baw_web/baw-server
    working_dir: /home/baw_web/baw-server

  workers_test:
    <<: *worker
    environment:
      RAILS_ENV: test
  scheduler:
    <<: *worker
    command: >-
      rerun -- bin/baw-workers baw:worker:run_scheduler
  scheduler_test:
    <<: *worker
    command: >-
      rerun -- bin/baw-workers baw:worker:run_scheduler
    environment:
      RAILS_ENV: test

  web:
    build:
        context: .
        dockerfile: ./Dockerfile
    command: bundle exec rails server
    depends_on:
      - db
      - redis
      - upload
      - upload_test
      - workers
      - workers_test
      - scheduler
      - scheduler_test
    environment:
      RAILS_ENV: development
      MIGRATE_DB: "true"
      # pass through values
      NEXT_VERSION: ~
      CHANGELOG_GITHUB_TOKEN: ~
    user: baw_web
    volumes:
      - type: bind
        source: ./
        target: /home/baw_web/baw-server
    ports:
      - "3000:3000"
      # rdebug-ide port
      - "1234:1234"
      - "26162:26162"
    networks:
      - baw_network
networks:
  baw_network:

volumes:
  # We're using a volume mount for tmp because it offers better performance
  # than a bind mount. It also does not seem to suffer from cache/metadata
  # problems that bind mounts (see caching in cifs/nfs).
  # The downside to this is that we can no longer access files in /tmp on
  # out hosts for dev work.
  # 2020-09 update: we're now running in WSL2/linux hosts only. The disadvantages
  #  of bind mounts may be negated. Additionally we want to mount sub-directories in
  #  tmp (the default bind location for this volume) in different images which is tricky.
  #  Thus trialing running without volume
  #baw_docker_shared_storage:
  postgres-data:
