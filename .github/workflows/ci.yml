name: Run tests, publish docker image

on:
  push:
    paths-ignore:
      - "swagger/**"
  pull_request:
    paths-ignore:
      - "swagger/**"

env:
  IMAGE_NAME: workbench-server
  DOCKER_BUILDKIT: 1
  REGISTRY: ghcr.io

jobs:
  # Build the Docker image and save it as an artifact
  build:
    runs-on: ubuntu-latest
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-tags: ${{ steps.meta.outputs.tags }}
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          lfs: true

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            
      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            trimmed=false

  # Test jobs that run in parallel using the built image
  test:
    needs: build
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        test-group:
          - api
          - permissions
          - requests
          - unit
          - features-capabilities
          - models-controllers-routing
          - acceptance-other
          
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          lfs: true

      - name: Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Update docker-compose with built image
        run: |
          # Extract the first tag from the build job output
          IMAGE_TAG=$(echo "${{ needs.build.outputs.image-tags }}" | head -n1)
          echo "Using image: $IMAGE_TAG"
          # Update the CI compose file to use the built image
          sed -i "s|image: baw-server:ci|image: ${IMAGE_TAG}|g" docker-compose.ci.yml

      - name: Start services
        run: |
          docker compose -f docker-compose.ci.yml up --detach --wait --timeout 120
          
      - name: Debugging
        run: |
          docker compose -f docker-compose.ci.yml ps
          docker ps
        if: ${{ always() }}
          
      - name: Prepare test database
        run: |
          docker compose -f docker-compose.ci.yml exec -T web rake baw:db_prepare
        env:
          RAILS_ENV: test

      - name: Run ${{ matrix.test-group }} tests
        run: |
          case "${{ matrix.test-group }}" in
            "api")
              docker compose -f docker-compose.ci.yml exec -T web rspec spec/api --format progress --format html --out rspec_results_api.html
              ;;
            "permissions")
              docker compose -f docker-compose.ci.yml exec -T web rspec spec/permissions --format progress --format html --out rspec_results_permissions.html
              ;;
            "requests")
              docker compose -f docker-compose.ci.yml exec -T web rspec spec/requests --format progress --format html --out rspec_results_requests.html
              ;;
            "unit")
              docker compose -f docker-compose.ci.yml exec -T web rspec spec/unit spec/lib spec/support/matchers --format progress --format html --out rspec_results_unit.html
              ;;
            "features-capabilities")
              docker compose -f docker-compose.ci.yml exec -T web rspec spec/features spec/capabilities --format progress --format html --out rspec_results_features.html
              ;;
            "models-controllers-routing")
              docker compose -f docker-compose.ci.yml exec -T web rspec spec/models spec/controllers spec/routing spec/views spec/migrations --format progress --format html --out rspec_results_other.html
              ;;
            "acceptance-other")
              docker compose -f docker-compose.ci.yml exec -T web rspec spec/acceptance --format progress --format html --out rspec_results_acceptance.html
              ;;
          esac
        env:
          RAILS_ENV: test

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: rspec-test-results-${{ matrix.test-group }}
          path: rspec_results_*.html

      - name: Upload test logs
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-logs-${{ matrix.test-group }}
          path: log/*test.log

      - name: Stop services
        if: always()
        run: docker compose -f docker-compose.ci.yml down

  # Generate API documentation (only on master branch push)
  docs:
    needs: [build, test]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          lfs: true
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Update docker-compose with built image
        run: |
          IMAGE_TAG=$(echo "${{ needs.build.outputs.image-tags }}" | head -n1)
          echo "Using image: $IMAGE_TAG"
          sed -i "s|image: baw-server:ci|image: ${IMAGE_TAG}|g" docker-compose.ci.yml

      - name: Start services
        run: docker compose -f docker-compose.ci.yml up --detach --wait --timeout 120

      - name: Generate API docs
        run: docker compose -f docker-compose.ci.yml exec -T web generate_docs.sh

      - name: Stop services
        if: always()
        run: docker compose -f docker-compose.ci.yml down

      - name: Commit swagger doc changes
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: |
            Update API docs

            [skip ci]
          file_pattern: swagger/**

  # Push image to DockerHub (only on master branch and tags)
  push:
    needs: [build, test]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/master' || contains(github.ref, 'refs/tags/'))

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 200

      - name: Calculate git describe
        id: tagger
        shell: pwsh
        run: |
          $result = @( git fetch --prune && git describe 'HEAD~' )
          $last_line = $result[-1]
          if ([string]::IsNullOrWhiteSpace($last_line)) {
            Write-Output "failed to get git describe, result was: $result"
            exit 1
          }
          echo "tag=$last_line" >> $env:GITHUB_OUTPUT

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: atruskie
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: Build and push to DockerHub
        uses: docker/build-push-action@v5
        with:
          build-args: |
            trimmed=true
            version=${{steps.tagger.outputs.tag}}
          context: .
          push: true
          tags: qutecoacoustics/workbench-server:${{steps.tagger.outputs.tag}},qutecoacoustics/workbench-server:latest
          labels: |
             version=${{steps.tagger.outputs.tag}}
          cache-from: type=gha
          cache-to: type=gha,mode=max