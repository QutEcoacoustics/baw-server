# Accessible through Settings.key
# Environment specific settings expected in config/settings/{environment_name}.yml

redis:
  namespace: "baw-workers"
  # http://www.rubydoc.info/github/redis/redis-rb/Redis#initialize-instance_method
  connection: &redis_config # see docker compose
    host: redis
    port: 6379
    password:
    db: 0
host:
  name: web
  port: 3000
  cors_origins:
    - !ruby/regexp '/\A(https?:\/\/)?localhost(:\d+)?\z/'
    - !ruby/regexp '/\A(https?:\/\/)?127\.0\.0\.1(:\d+)?\z/'
    - !ruby/regexp '/\A(https?:\/\/)?192\.168\.0\.\d{1,3}(:\d+)?\z/'
    # development.ecosounds.org is a redirect to localhost
    - !ruby/regexp '/\A(https?:\/\/)?development.ecosounds.org(:\d+)?\z/'
# trusted proxies allow us to filter out proxy ips so request.remote_ip works
# An array of IPAddr compatible strings
trusted_proxies: [ ]
action_cable:
  adapter: redis
  url: redis://redis:6379/0
  channel_prefix:
resque:
  # queues_to_process is only needed when running a Resque worker to
  # specify the Resque queues to watch.
  queues_to_process:
    - media_<%= BawApp.env %>
    - active_storage_<%= BawApp.env %>
    - harvest_scan_<%= BawApp.env %>
    - analysis_cancel_items_<%= BawApp.env %>
    - analysis_remote_enqueue_<%= BawApp.env %>
    - analysis_status_check_<%= BawApp.env %>
    - harvest_<%= BawApp.env %>
    - analysis_amend_after_harvest_<%= BawApp.env %>
    - analysis_import_results_<%= BawApp.env %>
    - maintenance_<%= BawApp.env %>
    - analysis_stale_check_<%= BawApp.env %>
    - harvest_delete_<%= BawApp.env %>
    - default_<%= BawApp.env %>
  connection: *redis_config
  namespace: resque
  log_level: "Logger::INFO"
  polling_interval_seconds: 0.1
  # specify background_pid_file to have a Resque worker run in the background
  # otherwise it will run in the foreground
  # We always want a worker to run in the foreground in a container
  background_pid_file: ~
resque_scheduler:
  log_level: "Logger::DEBUG"
  polling_interval_seconds: 5.0
# these are the available background jobs that can be enqueued
actions:
  analysis_cancel_items:
    queue: analysis_cancel_items_<%= BawApp.env %>
  analysis_remote_enqueue:
    queue: analysis_remote_enqueue_<%= BawApp.env %>
    # a 6-star cron schedule used by resque-scheduler for regularly schedules jobs
    # We use every 5 seconds for testing but production should probably be set to a
    # larger value (every 5 minutes?)
    schedule: "*/5 * * * * *"
  analysis_stale_check:
    queue: analysis_stale_check_<%= BawApp.env %>
    # a 6-star cron schedule used by resque-scheduler for regularly schedules jobs
    # We use every 5 seconds for testing but production should probably be set to a
    # larger value (every 5 minutes?)
    schedule: "*/5 * * * * *"
    # the minimum age a analysis jobs item must be before we start polling the
    # remote queue for a status update (assuming that in the nominal case the
    # webhooks make this polling unnecessary). Polling is inefficient so we don't
    # want to be polling jobs that could still finish successfully.
    min_age_seconds: 43200 # 12 hours
  analysis_status_check:
    queue: analysis_status_check_<%= BawApp.env %>
    # a 6-star cron schedule used by resque-scheduler for regularly schedules jobs
    # We use every 5 seconds for testing but production should probably be set to a
    # larger value (every 5 minutes?)
    schedule: "*/5 * * * * *"
  analysis_import_results:
    queue: analysis_import_results_<%= BawApp.env %>
  analysis_amend_after_harvest:
    queue: analysis_amend_after_harvest_<%= BawApp.env %>
  harvest:
    queue: harvest_<%= BawApp.env %>
    to_do_path: /data/<%= BawApp.env %>/harvester_to_do
  harvest_scan:
    queue: harvest_scan_<%= BawApp.env %>
  harvest_delete:
    queue: harvest_delete_<%= BawApp.env %>
     # 1 week in seconds
    delete_after: 604800
  media:
    queue: media_<%= BawApp.env %>
    dry_run: false
    cache_to_redis: true
  audio_check:
    queue: maintenance_<%= BawApp.env %>
  active_storage:
    queue: active_storage_<%= BawApp.env %>
  active_job_default:
    queue: default_<%= BawApp.env %>
media_request_processor: resque # options are local or resque (now only ever use resque with containers)
# batch analysis needs a ssh connection to a head node on a PBS cluster
batch_analysis:
  connection:
    host: analysis_test
    port: 22
    username: pbsuser
    # we support password auth but prefer private key
    password: ~ #password
    key_file: ./provision/analysis/client_key
  pbs:
    default_queue:
    # the primary group:
    #   qsub -W group_list=pbs_user job.sh
    primary_group: pbsuser
    # the path where pbs binaries are located.
    # If nil, it will rely on PATH being set and the appropriate profile being loaded.
    # If set, it will append this path as a prefix to any pbs commands.
    bin_path: /opt/pbs/bin
    # An optional string to insert into job scripts that run before the rest of
    # the script is run. This can be used to load modules, set environment variables, etc.
    prelude_script: ~
  # a safety limit that allows us to enqueue even less remote jobs if needed
  remote_enqueue_limit: ~
  # how long an issued jwt is valid for, 14 * 86400 = 1209600
  auth_tokens_expire_in: 1209600
  # the mapping between the data mount on the workbench and the mount on the cluster
  # in most setups the workbench doesn't control the cluster - we're just a guest -
  # which means the mounts are different
  root_data_path_mapping:
    workbench: /data/<%= BawApp.env %>
    cluster: /data/<%= BawApp.env %>
dbs:
  ######################################################
  # these values are read by config/database.yml
  # WARNING: sometimes rails loads the settings for multiple environments at the same time!
  # Thus depending on RAILS_ENV/Rails.env/BawApp.env here will fail!
  # We can't split it into environment settings files either because only one env is loaded by our config system.
  ######################################################
  _default: &db
    adapter: postgresql
    encoding: utf8
    reconnect: false
    pool: 2
    username: postgres
    password: "password"
    # see docker compose
    host: db
    sslmode: allow
  test:
    <<: *db
    database: baw_local_test
  development:
    <<: *db
    database: baw_local_development
devise:
  ######################################################
  # these values are read for config.{key} in
  # File devise.rb #
  # We never want these values to make it production.
  # Documented for completion here but must be overridden!
  ######################################################
  ##pepper: 128 char random pepper 128 char random pepper
  ##secret_key: 128 char random pepper 128 char random pepper
######################################################
# File secret_token.rb #
# We never want these values to make it production.
# Documented for completion here but must be overridden!
######################################################
##secret_token: some long secret token - at least 30 chars, all random
##secret_key_base: some long secret token - at least 30 chars, all random
authentication:
   # how long a user can be inactive before their token expires
   # Any auth method will refresh the expiration time.
   token_rolling_expiration: 86400
paths:
  original_audios:
    - /data/<%= BawApp.env %>/original_audio
  cached_spectrograms:
    - /data/<%= BawApp.env %>/cached_spectrogram
  cached_audios:
    - /data/<%= BawApp.env %>/cached_audio
  cached_analysis_jobs:
    - /data/<%= BawApp.env %>/analysis_results
  worker_log_file: <%= BawApp.root %>/log/worker.<%= BawApp.env %>.log
  mailer_log_file: <%= BawApp.root %>/log/mailer.<%= BawApp.env %>.log
  audio_tools_log_file: <%= BawApp.root %>/log/audio_tools.<%= BawApp.env %>.log
  temp_dir: <%= BawApp.root %>/tmp
  programs_dir: <%= BawApp.root %>/programs
logs:
  # used to disambiguate log file refs in a multi instance scenario
  tag: 'local'
  directory: <%= BawApp.root %>/log
upload_service:
  admin_host: upload
  # same in dev but in prod our public host goes through a load balancer
  public_host: upload
  port: 8080
  username: admin
  password: password
  sftp_port: 2022
# Configuration for internal microservices
internal:
  # array of IPs that we'll accept connect[ions from
  # can be any format that IPAddr.new supports
  allow_list:
    - 172.0.0.0/8
harvester:
  email: harvester@example.com
  password: password
admin_user:
  email: admin@example.com
  password: password
mailer:
  # smtp gets set directly to config.action_mailer.smtp_settings in File environments/{environment_name}.rb
  # See http://api.rubyonrails.org/classes/ActionMailer/Base.html#class-ActionMailer::Base-label-Configuration+options
  # see http://guides.rubyonrails.org/action_mailer_basics.html#action-mailer-configuration
  smtp:
    address: localhost
    port: 25
    #domain: domain.com
    #user_name: username
    #authentication: login
    #password: password
  emails:
    email_prefix: "[prefix]"
    sender_address: address@example.com
    required_recipients:
      - address@example.com
  log_level: "Logger::INFO"
cached_audio_defaults:
  extension: mp3
  channel: 0
  sample_rate: 22050
  max_duration_seconds: 300.0
  min_duration_seconds: 0.5
cached_spectrogram_defaults:
  extension: png
  channel: 0
  sample_rate: 22050
  window: 512
  window_function: Hamming
  colour: "g"
  ppms: 0.045
  max_duration_seconds: 180.0
  min_duration_seconds: 0.5
available_formats:
  text:
    - json
  audio:
    - mp3
    - webm
    - ogg
    - flac
    - wav
  audio_decode_only:
    - wac
  image:
    - png
  metadata:
    - xlsx
    - csv
    - txt
audio_event_imports:
  # 10 Megabytes
  max_file_size_bytes: 10485760
  acceptable_content_types:
    - csv
    - txt
    - json
audio_tools:
  ffmpeg_executable: ffmpeg
  ffprobe_executable: ffprobe
  mp3splt_executable: mp3splt
  sox_executable: sox
  wavpack_executable: wvunpack
  shntool_executable: shntool
  wac2wav_executable: wac2wavcmd
  imagemagick_convert_executable: convert
  imagemagick_identify_executable: identify
  max_duration_seconds: 300.0
  log_level: "Logger::INFO"
audio_tools_timeout_sec: 60.0
# max overlap (default 5): maximum amount an audio recording can be trimmed at the end
audio_recording_max_overlap_sec: 5.0
# min duration (default 10): must be larger than audio_recording_max_overlap_sec
audio_recording_min_duration_sec: 10.0
organisation_names:
  # used to namespace technical things. Not user facing.
  site_short_name: dev
  site_long_name: Acoustic Workbench
  organisation_name: Audio Group
  github_issues_url: "url to github issues page"
  parent_site_name: "<<Brand name here>>"
  parent_site_link: "http://example.com"
  address: |
    P. Sherman
    42 Wallaby Way
    Sydney
    Australia
  custom_menu:
    header_title: Custom Menu
    items:
      - title: Item 1
        url: "/item1"
      - title: Item 2
        url: "/item2"
analytics:
  domain: example.com
  ua: "UA-XXXXXX"
recaptcha:
  public_key: set recaptcha public key
  private_key: set recaptcha private key
  # only set proxy if needed
  proxy:
google_maps:
  api_key: your google maps api key
permissions:
  any_user_can_create_projects: true
